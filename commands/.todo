##########################################################
##                                                      ##
##                   Made by Sam Amis                   ##
##                                                      ##
##########################################################

function finish {
  echo
  stty echo
  tput cnorm
  rm $TODO
  rm $CHECK
  exit 0
}

function draw_screen {
  clear
  cat $TODO | head -n $((`tput lines`-1))
}

function urgent_tasks {
  grep "^!" $TODO_FILE | fold -w $((`tput cols`-1)) -s | sed "s/^\([^!].*\)/   \x1b[1;31m\1\x1b[0m/;s/\(^!.*\)/ \x1b[1;31m\1\x1b[0m/"
}

function high_priority_tasks {
  grep "^#" $TODO_FILE | fold -w $((`tput cols`-1)) -s | sed "s/^\([^#]\)/   \1/;s/\(^#\)/ \x1b[1;31m!\x1b[0m/"
}

function normal_tasks {
  grep "^-" $TODO_FILE | fold -w $((`tput cols`-1)) -s | sed "s/^\([^-]\)/   \1/;s/\(^-\)/ \x1b[1;31m\1\x1b[0m/"
}

function low_priority_tasks {
  grep "^~" $TODO_FILE | fold -w $((`tput cols`-1)) -s | sed "s/^\([^~]\)/   \1/;s/\(^~\)/ \x1b[1;34m\1\x1b[0m/"
}

function done_tasks {
  grep "^+" $TODO_FILE | fold -w $((`tput cols`-1)) -s | sed "s/^\([^+]\)/   \1/;s/\(^+\)/ \x1b[1;32m\1\x1b[0m/"
}

function rejected_tasks {
  grep "^/" $TODO_FILE | fold -w $((`tput cols`-1)) -s | sed "s/^\([^\/].*\)/   \x1b[31m\1\x1b[0m/;s/\(^\/.*\)/ \x1b[31m\1\x1b[0m/"
}

function err {
  if [ ! -z "$1" ]
  then
    >&2 echo "$1"
  fi
  exit 1
}

# Define Variables
RED="\033[31m"
WHITE="\033[37m"
BOLD="\033[1m"
RESET="\033[0m"

if [ -z "$TODO_FILE" ]
then
  TODO_FILE=~/.todo
fi

if [ -z $ARCHIVE_FILE ]
then
  ARCHIVE_FILE="$TODO_FILE.archive"
fi

if [ -z "$TODO_STRING" ]
then
  TODO_STRING="TODO"
fi

REGEX='^[0-9]+$'

if [ $# -eq 0 ]
then
  if [ -f "$TODO_FILE" ] && [ -s "$TODO_FILE" ]
  then
    urgent_tasks
    high_priority_tasks
    normal_tasks
    low_priority_tasks
    done_tasks
    rejected_tasks
  fi
elif [ "$1" == "add" ] || [ "$1" == "new" ]
then
  if [ $# -eq 1 ]
  then
    err "Nothing given to add"
  fi

  ENTRY=$(echo $2 | awk '{$1=$1};1') # trim whitespace

  if [[ ${ENTRY:0:1} != "!" && ${ENTRY:0:1} != "-" && ${ENTRY:0:1} != "+" ]]
  then
    ENTRY=$(echo "- $ENTRY")
  fi

  if grep -q '\'"$ENTRY" "$TODO_FILE"
  then
    err "Task is already in TODO list"
  else
    echo "$ENTRY" >> "$TODO_FILE"
  fi
elif [ "$1" == "archive" ]
then
  REMOVE_TASKS=$($0 view done; $0 view rejected)

  if [ ! -z "$REMOVE_TASKS" ]
  then
    TODAY=$(date +"%Y-%m-%d")

    if [ ! -f $ARCHIVE_FILE ]
    then
      echo -e "$BOLD$WHITE[$TODAY]$RESET\n" > $ARCHIVE_FILE
    fi

    if ! grep "\[$TODAY\]" <<< `head -n 1 $ARCHIVE_FILE` > /dev/null
    then
      sed -i "1s/^/\x1b[1;39m[$TODAY]\x1b[0m\n\n/" $ARCHIVE_FILE
    fi

    ARRAY=()
    while IFS= read -r line
    do
      ARRAY+=("$line")
      # if grep -q "^[-+\!]" <<< "$line"
      # then
      #   ARRAY+=("$line")
      # else
      #   ${ARRAY[${#ARRAY[@]-1}]}=("${ARRAY[${#ARRAY[@]-1}]}" + "$line")
      # fi
    done <<< "$REMOVE_TASKS"

    for ((i=${#ARRAY[@]}-1; i>=0; i--))
    do
      sed -i "2i${ARRAY[$i]}" $ARCHIVE_FILE
    done

    [ `$0 count done` -gt 0 ] && $0 remove --force "^+"
    [ `$0 count rejected` -gt 0 ] && $0 remove --force "^\/"
  fi
elif [ "$1" == "count" ]
then
  if [ $# -eq 1 ]
  then
    err "No task type given to count"
  fi

  if [ "$2" == "urgent" ]
  then
    grep '^!' "$TODO_FILE" | wc -l
  elif [ "$2" == "done" ]
  then
    grep '^+' "$TODO_FILE" | wc -l
  elif [ "$2" == "low" ]
  then
    grep '^~' "$TODO_FILE" | wc -l
  elif [ "$2" == "rejects" ] || [ "$2" == "rejected" ]
  then
    grep '^/' "$TODO_FILE" | wc -l
  elif [ "$2" == "tasks" ]
  then
    grep '^-' "$TODO_FILE" | wc -l
  else
    err "'$2' is not a task type"
  fi
elif [ "$1" == "display" ]
then
  if [ ! -z "$2" ]
  then
    BASE_DIR="$2"
    if [ -d $BASE_DIR ]
    then
      GREP_BASE_DIR=$BASE_DIR
    else
      err "'$2' is not a directory"
    fi
  else
    GREP_BASE_DIR=""
  fi

  if [[ $2 =~ $REGEX ]]
  then
    SLEEPTIME=$2
  else
    SLEEPTIME=1
  fi

  TODO=$(mktemp)
  CHECK=$(mktemp)

  # Perform Initialisation
  clear; printf $BOLD$WHITE"Initialising..."$RESET

  trap finish SIGINT         # Make sure script runs the finish function
  trap finish SIGTERM        # before ending, even if CTRL-C is used
  trap draw_screen SIGWINCH  # Re-draw screen if terminal size changes

  tput civis                 # Make the cursor invisible during the script

  stty -echo                 # Prevent user input during script


  # Display Loop
  while true
  do
    $0 full "$GREP_BASE_DIR" > $CHECK
    if [ ! -s $CHECK ]
    then
      printf $BOLD$WHITE"There are currently no TODOs$RESET" > $CHECK
    fi
    cmp --silent $TODO $CHECK || ( cp $CHECK $TODO; clear; draw_screen )
    sleep $SLEEPTIME
  done
elif [ "$1" == "done" ]
then
  if [ $# -eq 1 ]
  then
    done_tasks
    exit 0
  fi

  if [ "$2" == "-f" ] || [ "$2" == "--force" ]
  then
    FORCE=TRUE
    SEARCH_STRING="$3"
  else
    FORCE=FALSE
    SEARCH_STRING="$2"
  fi

  count=`grep -v "^+" "$TODO_FILE" | grep "$SEARCH_STRING" | wc -l`
  if [ $count -eq 0 ]
  then
    if grep -q "$SEARCH_STRING" "$TODO_FILE"
    then
      err "Search string only matched completed TODOs"
    else
      err "Search string didn't match any TODOs"
    fi
  elif [ $count -ne 1 ] && [ $FORCE == "FALSE" ]
  then
    err "Search string matched $count TODOs, be more specific!"
  fi

  sed -i "s/^. \(.*$SEARCH_STRING\)/+ \1/" "$TODO_FILE"
elif [ "$1" == "edit" ]
then
  if [ -z "$EDITOR" ]
  then
    if command -v nvim > /dev/null
    then
      EDITOR=nvim
    elif command -v vim > /dev/null
    then
      EDITOR=vim
    elif command -v vi > /dev/null
    then
      EDITOR=vi
    else
      err "Could not find editor to use"
    fi
  fi

  if [ -z "$2" ]
  then
    $EDITOR "$TODO_FILE"
  else
    if [ "$2" == "--all" ]
    then
      TODO_FILELIST="`grep -rl \"$TODO_STRING\"`"
      if [ $? == 0 ]
      then
        for f in `echo "$TODO_FILELIST"`
        do
          $EDITOR +1 "+/$TODO_STRING" "$f"
        done
      else
        err "Could not find any files containing '$TODO_STRING'"
      fi
    elif [ "$2" == "--archive" ]
    then
      $EDITOR $ARCHIVE_FILE
    elif [ -f "$2" ]
    then
      if grep "$TODO_STRING" "$2" > /dev/null
      then
        $EDITOR +1 "+/$TODO_STRING" "$2"
      else
        err "'$2' does not contain any instances of '$TODO_STRING'"
      fi
    else
      err "Could not find file '$2'"
    fi
  fi
elif [ "$1" == "full" ]
then
  if [ ! -z "$2" ]
  then
    BASE_DIR="$2"
    if [ -d $BASE_DIR ]
    then
      GREP_BASE_DIR=$BASE_DIR/*
    else
      err "'$2' is not a directory"
    fi
  fi

  FILE_TODOS=$(grep -IrH "$TODO_STRING" $GREP_BASE_DIR 2> /dev/null | sed "s/^\(.*\):.*$TODO_STRING \(.*\)/[\1]\n - \2/g" | sed 's/[ ]\+\*\/.*//g' | fold -w $((`tput cols`)) -s | sed "s/^\([^ \[]\)/   \1/" | sed "s/^ -/`printf "$BOLD$RED -$RESET"`/" )

  if [ ! -z "$FILE_TODOS" ]
  then
    awk '{ if (substr($0,1,1) ~ /^\[/) { if (!seen[$0]++ ) {print} } else { print } }' <<< "$FILE_TODOS" | sed "s/^\[\(.*\)\]$/`printf "$BOLD$WHITE["`\1`printf "$WHITE]$RESET"`/g"
  fi

  UNFORMATTED_TODOS=$(echo -e "[NOTES FILE]\n`$0`")

  if [ ! -z "$UNFORMATTED_TODOS" ]
  then
    awk '!seen[$0]++' <<< "$UNFORMATTED_TODOS" | sed "s/^\[\(.*\)\]$/`printf "$BOLD$WHITE["`\1`printf "$WHITE]$RESET"`/g"
  fi

elif [ "$1" == "help" ] || [ "$1" == "--help" ]
then
  echo "TODO management by Sam Amis"
  echo ""
  echo "List of commands:"
  echo "  add"
  echo "  archive"
  echo "  display"
  echo "  done"
  echo "  edit"
  echo "  full"
  echo "  help"
  echo "  high"
  echo "  low"
  echo "  reject"
  echo "  remove"
  echo "  search"
  echo "  urgent"
  echo "  view"
  echo "    archive"
  echo "    done"
  echo "    high"
  echo "    low"
  echo "    normal"
  echo "    urgent"
  exit 0

elif [ "$1" == "high" ]
then
  if [ $# -eq 1 ]
  then
    high_priority_tasks
    exit 0
  fi

  ENTRY=$(echo $2 | awk '{$1=$1};1') # trim whitespace

  if grep -q '\'"# $ENTRY" "$TODO_FILE"
  then
    err "Task is already in TODO list"
  else
    echo "# $ENTRY" >> "$TODO_FILE"
  fi

elif [ "$1" == "low" ] || [ "$1" == "low-priority" ]
then
  if [ $# -eq 1 ]
  then
    low_priority_tasks
    exit 0
  fi

  ENTRY=$(echo $2 | awk '{$1=$1};1') # trim whitespace

  if grep -q '\'"~ $ENTRY" "$TODO_FILE"
  then
    err "Task is already in TODO list"
  else
    echo "~ $ENTRY" >> "$TODO_FILE"
  fi
elif [ "$1" == "reject" ]
then
  if [ $# -eq 1 ]
  then
    rejected_tasks
    exit 0
  fi

  if [ "$2" == "-f" ] || [ "$2" == "--force" ]
  then
    FORCE=TRUE
    SEARCH_STRING="$3"
  else
    FORCE=FALSE
    SEARCH_STRING="$2"
  fi

  count=`grep -v "^/" "$TODO_FILE" | grep "$SEARCH_STRING" | wc -l`
  if [ $count -eq 0 ]
  then
    if grep -q "$SEARCH_STRING" "$TODO_FILE"
    then
      err "Search string only matched rejected TODOs"
    else
      err "Search string didn't match any TODOs"
    fi
  elif [ $count -ne 1 ] && [ $FORCE == "FALSE" ]
  then
    err "Search string matched $count TODOs, be more specific!"
  fi

  sed -i "s/^. \(.*$SEARCH_STRING\)/\/ \1/" "$TODO_FILE"
elif [ "$1" == "remove" ]
then
  if [ $# -eq 1 ]
  then
    err "No search string given"
  fi

  if [ "$2" == "-f" ] || [ "$2" == "--force" ]
  then
    FORCE=TRUE
    SEARCH_STRING="$3"
  else
    FORCE=FALSE
    SEARCH_STRING="$2"
  fi

  count=`grep "$SEARCH_STRING" "$TODO_FILE" | wc -l`
  if [ $count -eq 0 ]
  then
    err "Search string didn't match any TODOs"
  elif [ $count -ne 1 ] && [ $FORCE == "FALSE" ]
  then
    err "Search string matched $count results, be more specific!"
  fi

  sed -i "/$SEARCH_STRING/d" "$TODO_FILE"
elif [ "$1" == "search" ] || [ "$1" == "grep" ]
then
  if [ $# -eq 1 ]
  then
    err "No search string given"
  fi

  $0 full | grep "$2"
elif [ "$1" == "undo" ]
then
  if [ $# -eq 1 ]
  then
    err "No search string given"
  fi

  count=`grep "^+" "$TODO_FILE" | grep "$2" | wc -l`
  if [ $count -eq 0 ]
  then
    if grep -qv "$2" "$TODO_FILE"
    then
      err "Search string only matched uncompleted TODOs"
    else
      err "Search string didn't match any TODOs"
    fi
  elif [ $count -ne 1 ]
  then
    err "Search string matched $count TODOs, be more specific!"
  fi

  sed -i "s/^+ \(.*$2\)/- \1/" "$TODO_FILE"
elif [ "$1" == "urgent" ]
then
  if [ $# -eq 1 ]
  then
    urgent_tasks
    exit 0
  fi

  ENTRY=$(echo $2 | awk '{$1=$1};1') # trim whitespace

  if grep -q '\'"! $ENTRY" "$TODO_FILE"
  then
    err "Task is already in TODO list"
  else
    echo "! $ENTRY" >> "$TODO_FILE"
  fi
elif [ "$1" == "view" ]
then
  if [ -z "$2" ]
  then
    err "Usage: `basename $0` view [archive|done|tasks|urgent]"
  elif [ "$2" == "archive" ]
  then
    if [ -f $ARCHIVE_FILE ]
    then
      echo ""
      cat $ARCHIVE_FILE | less -FRSX
    fi
  elif [ "$2" == "reject" ] || [ "$2" == "rejects" ] || [ "$2" == "rejected" ]
  then
    rejected_tasks
  elif [ "$2" == "done" ]
  then
    done_tasks
  elif [ "$2" == "high" ]
  then
    high_priority_tasks
  elif [ "$2" == "low" ] || [ "$2" == "low-priority" ]
  then
    low_priority_tasks
  elif [ "$2" == "normal" ] || [ "$2" == "tasks" ]
  then
    normal_tasks
  elif [ "$2" == "urgent" ]
  then
    urgent_tasks
  else
    err "Unknown view option: $2"
  fi
else
  err "Unknown option: $1"
fi

unset -f draw_screen
unset -f urgent_tasks
unset -f high_priority_tasks
unset -f normal_tasks
unset -f low_priority_tasks
unset -f done_tasks
unset -f rejected_tasks
